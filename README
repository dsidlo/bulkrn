
renumFiles.pl - ReNumber Files

  Safely renumbers and renames numeric portions of file(s) name in the current directory.
  Watches for filename overlap/overwrite conditions what would result in a loss of a file
  and undoes any changes if there is a chance that data-loss might occur.

  By default, a simulated test is run to ensure that no data-loss occurs before the actual
  file renames are performed. This default pre-test can be disabled by the [--run-only | -x]
  option.

  You may test/simulate the rename process without actually performing the file renames by
  using the -t switch. By default, the [--test | -t] option performs verbose output about
  what file rename operations would be performed.

  usage: renumFiles.pl [-h|-t|-v-|-x] -f [regexpWith2BackRefs] -r [br:n1|n1-n2:nn[!]] [-d [ZeroPaddedLen]]

  Requires that the first argument, be defined as a pattern that matches to
  a set of file-names of interest, where the pattern returns upto 3 back-reference
  values. The parameter br is the Back Reference value which will be changed
  into a new number.

  By only supplying the [--filePat | -f] option and a file pattern, you can test that
  your file pattern is picking up the files that you expect to rename. And, you can the
  how the file name splits up into its back-references.

$ ./renumFiles.pl -f '(mwlog\.wfiejb\d+)(\.\d\d\d\d)(08\d\d)' 
Testing the FilePattern...
FilePattern Test: mwlog.wfiejb1.20100810 => (mwlog.wfiejb1) (.2010) (0810)
FilePattern Test: mwlog.wfiejb1.20100811 => (mwlog.wfiejb1) (.2010) (0811)
FilePattern Test: mwlog.wfiejb1.20100812 => (mwlog.wfiejb1) (.2010) (0812)
...

 The file name pattern...

  -filePat|-f [filePattern RegExpp]

  '(mwlog\.wfiejb)(\d+)(\..*)'
    ^------------  ^--- ^--- 
    |              |    |
    |              |    +---: BackRef $3 -> $fn1
    |              +--------: BackRef $2 -> $fn2
    +-----------------------: BackRef $1 -> $fn3

  In the example above...
  For our example, we want to renumber the values of the 2nd back-reference, so the
  2nd back-reference must allways return a numeric value.
  This numberic value is compared against n1. And, if there is a match, n1 is
  substitued with the value of nn. And the new file name is built...

  $newFn = $fn1.($fn+(n2-n1)).$fn3;

  The --reNum|-r parameter consists of... [br:n1|n1-n2:nn]

  br: Back Reference value that is the numberic value that will be changed.
  n1: The first numeric value that will be changed.
  n2: The last  numeric value that will be changed.
  nn: The numberic value that n1 will be changed to.
      Subsequent values will be changed to n2+(nn-n1) incrementing the value
      by the difference between n1 and nn.
      An exclaimation-point symbol after nn (:20!) fixes the new number to that
      single value. The "new number" value will not change relative to the 
      Back Reference value found in the file name.

  ** If n1 is specified without n2,only the files whos back-reference values match
     n1 will be change to the new number.
     If n1 is specified with a trailing dash "-" and n2 is not specified "10-",
     all values from n1 and greater are changed to the new value. 
     If n1 and n2 exist with a dash "-" between them "10-20" all values between
     and including n1 and n2 are changed to a new value.

  example: renumFiles.pl -f '(mwlog\.wfiejb)(\d+)(\..*)' -r 2:5:15 

  Above, only n1 and nn are specified as options, all $2 back-reference values that
  match 5 will be incrmented by 10 (nn-n1).

  example: renumFiles.pl -f '(mwlog\.wfiejb)(\d+)(\..*)' -r 2:5-:15 

  Above, only n1 and nn are specified as options, all $2 back-reference values that
  match 5 and above will be incrmented by 10 (nn-n1).

  example: renumFiles.pl -f '(mwlog\.wfiejb)(\d+)(\..*)' -r 2:5-7:15

  Above, n1-n2 and nn are specified as options, only $2 back-reference values that
  match 5 thru 7 are incrmented by 10. 

  The rename process watches for file name overlap conditions what would cause
  a file to be overwritten and lost. If such conditions are found, the process aborts
  after undoing all file renames that had been done thus far.

  Other options:

  --format|-d <Leading Zeros Format Length>
  Format the new numberic value with leading zeros to a length of n.
  example: -d 5

  --help|-h
  Output this help text.

  --reSeq|-s [increment]
  Resequence the numbers (n1-n2) begining with nn such that the new values are contiguous and optionaly incremented by [increment].

  --test|-t
  Test the renumbering/renaming process against the filenames in the current directory.

  --verbose | -v
  Print details of the renaming process.


